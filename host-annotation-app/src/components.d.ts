/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonSize, ControlType as ControlType1, GenericStatus, HeaderControlType, IBoolFunction, IUIEventHandler, LabelOrientation, PageKey } from "./global/Types";
import { ControlType } from "./components/components/input-control/InputControlTypes";
import { IChangeHandler, IControlListOption, IKeyPressHandler } from "./components/components/labeled-control/Common";
import { ISearchCallback } from "./components/components/search-panel/Common";
export { ButtonSize, ControlType as ControlType1, GenericStatus, HeaderControlType, IBoolFunction, IUIEventHandler, LabelOrientation, PageKey } from "./global/Types";
export { ControlType } from "./components/components/input-control/InputControlTypes";
export { IChangeHandler, IControlListOption, IKeyPressHandler } from "./components/components/labeled-control/Common";
export { ISearchCallback } from "./components/components/search-panel/Common";
export namespace Components {
    interface AboutPage {
    }
    interface AdminHomePage {
    }
    interface AdminSideMenu {
        "isOpen": boolean;
    }
    interface AnnotateHostPage {
    }
    interface AppRoot {
    }
    interface AppTabs {
    }
    interface AuthorizedHeader {
        "canGoBack": IBoolFunction;
        "controlType": HeaderControlType;
        "pageTitle": string;
        "useDefault": boolean;
    }
    interface BvbrcButton {
        "buttonKey": string;
        "clickHandler": IUIEventHandler;
        "icon": string;
        "iconOnRight": boolean;
        "isDisabled": boolean;
        "isLoading": boolean;
        "label": string;
        "loadingIcon": string;
        "loadingLabel": string;
        "refresh": () => Promise<void>;
        "size": ButtonSize;
        "status": GenericStatus;
    }
    interface BvbrcDialog {
        "cancelIcon": string;
        "cancelLabel": string;
        "close": () => Promise<void>;
        "open": () => Promise<void>;
    }
    interface BvbrcIcon {
        "cssClass": string;
        "isCustom": boolean;
        "name": string;
    }
    interface BvbrcIonButton {
    }
    interface CuratedWordsPage {
    }
    interface CurationTabs {
    }
    interface CuratorSideMenu {
        "isOpen": boolean;
    }
    interface FaqPage {
    }
    interface HomePage {
    }
    interface HostTaxaMatchesPage {
    }
    interface HostsPage {
    }
    interface InputControl {
        "controlType": ControlType;
        "cssClassNames": string[];
        "isReadOnly": boolean;
        "labelText": string;
        "value": string;
    }
    interface LabeledControl {
        "attributeKey": string;
        "changeHandler": IChangeHandler;
        "controlType": ControlType1;
        "getValue": () => Promise<string>;
        "initialValue": any;
        "isDisabled": boolean;
        "isReadOnly": boolean;
        "isRequired": boolean;
        "keypressHandler": IKeyPressHandler;
        "keyupHandler": IChangeHandler;
        "labelOrientation": LabelOrientation;
        "labelText": string;
        "listOptions": IControlListOption[];
        "spellcheck": boolean;
        "status": GenericStatus;
        "statusMessage": string;
        "textAreaRows": number;
        "textPlaceholder": string;
    }
    interface LoginPage {
    }
    interface LookupHostPage {
    }
    interface PrivacyPolicy {
    }
    interface ResetPasswordPage {
    }
    interface SearchPanel {
        "pageKey": PageKey;
        "placeholderText": string;
        "searchCallback": ISearchCallback;
        "useState": boolean;
    }
    interface SideMenuEntry {
        "icon": string;
        "label": string;
    }
    interface TaxonomySearchPage {
    }
    interface TermsOfService {
    }
    interface TestPage {
    }
    interface UnauthorizedHeader {
    }
    interface UserProfilePage {
    }
    interface ViewHostPage {
    }
}
declare global {
    interface HTMLAboutPageElement extends Components.AboutPage, HTMLStencilElement {
    }
    var HTMLAboutPageElement: {
        prototype: HTMLAboutPageElement;
        new (): HTMLAboutPageElement;
    };
    interface HTMLAdminHomePageElement extends Components.AdminHomePage, HTMLStencilElement {
    }
    var HTMLAdminHomePageElement: {
        prototype: HTMLAdminHomePageElement;
        new (): HTMLAdminHomePageElement;
    };
    interface HTMLAdminSideMenuElement extends Components.AdminSideMenu, HTMLStencilElement {
    }
    var HTMLAdminSideMenuElement: {
        prototype: HTMLAdminSideMenuElement;
        new (): HTMLAdminSideMenuElement;
    };
    interface HTMLAnnotateHostPageElement extends Components.AnnotateHostPage, HTMLStencilElement {
    }
    var HTMLAnnotateHostPageElement: {
        prototype: HTMLAnnotateHostPageElement;
        new (): HTMLAnnotateHostPageElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppTabsElement extends Components.AppTabs, HTMLStencilElement {
    }
    var HTMLAppTabsElement: {
        prototype: HTMLAppTabsElement;
        new (): HTMLAppTabsElement;
    };
    interface HTMLAuthorizedHeaderElement extends Components.AuthorizedHeader, HTMLStencilElement {
    }
    var HTMLAuthorizedHeaderElement: {
        prototype: HTMLAuthorizedHeaderElement;
        new (): HTMLAuthorizedHeaderElement;
    };
    interface HTMLBvbrcButtonElement extends Components.BvbrcButton, HTMLStencilElement {
    }
    var HTMLBvbrcButtonElement: {
        prototype: HTMLBvbrcButtonElement;
        new (): HTMLBvbrcButtonElement;
    };
    interface HTMLBvbrcDialogElement extends Components.BvbrcDialog, HTMLStencilElement {
    }
    var HTMLBvbrcDialogElement: {
        prototype: HTMLBvbrcDialogElement;
        new (): HTMLBvbrcDialogElement;
    };
    interface HTMLBvbrcIconElement extends Components.BvbrcIcon, HTMLStencilElement {
    }
    var HTMLBvbrcIconElement: {
        prototype: HTMLBvbrcIconElement;
        new (): HTMLBvbrcIconElement;
    };
    interface HTMLBvbrcIonButtonElement extends Components.BvbrcIonButton, HTMLStencilElement {
    }
    var HTMLBvbrcIonButtonElement: {
        prototype: HTMLBvbrcIonButtonElement;
        new (): HTMLBvbrcIonButtonElement;
    };
    interface HTMLCuratedWordsPageElement extends Components.CuratedWordsPage, HTMLStencilElement {
    }
    var HTMLCuratedWordsPageElement: {
        prototype: HTMLCuratedWordsPageElement;
        new (): HTMLCuratedWordsPageElement;
    };
    interface HTMLCurationTabsElement extends Components.CurationTabs, HTMLStencilElement {
    }
    var HTMLCurationTabsElement: {
        prototype: HTMLCurationTabsElement;
        new (): HTMLCurationTabsElement;
    };
    interface HTMLCuratorSideMenuElement extends Components.CuratorSideMenu, HTMLStencilElement {
    }
    var HTMLCuratorSideMenuElement: {
        prototype: HTMLCuratorSideMenuElement;
        new (): HTMLCuratorSideMenuElement;
    };
    interface HTMLFaqPageElement extends Components.FaqPage, HTMLStencilElement {
    }
    var HTMLFaqPageElement: {
        prototype: HTMLFaqPageElement;
        new (): HTMLFaqPageElement;
    };
    interface HTMLHomePageElement extends Components.HomePage, HTMLStencilElement {
    }
    var HTMLHomePageElement: {
        prototype: HTMLHomePageElement;
        new (): HTMLHomePageElement;
    };
    interface HTMLHostTaxaMatchesPageElement extends Components.HostTaxaMatchesPage, HTMLStencilElement {
    }
    var HTMLHostTaxaMatchesPageElement: {
        prototype: HTMLHostTaxaMatchesPageElement;
        new (): HTMLHostTaxaMatchesPageElement;
    };
    interface HTMLHostsPageElement extends Components.HostsPage, HTMLStencilElement {
    }
    var HTMLHostsPageElement: {
        prototype: HTMLHostsPageElement;
        new (): HTMLHostsPageElement;
    };
    interface HTMLInputControlElement extends Components.InputControl, HTMLStencilElement {
    }
    var HTMLInputControlElement: {
        prototype: HTMLInputControlElement;
        new (): HTMLInputControlElement;
    };
    interface HTMLLabeledControlElement extends Components.LabeledControl, HTMLStencilElement {
    }
    var HTMLLabeledControlElement: {
        prototype: HTMLLabeledControlElement;
        new (): HTMLLabeledControlElement;
    };
    interface HTMLLoginPageElement extends Components.LoginPage, HTMLStencilElement {
    }
    var HTMLLoginPageElement: {
        prototype: HTMLLoginPageElement;
        new (): HTMLLoginPageElement;
    };
    interface HTMLLookupHostPageElement extends Components.LookupHostPage, HTMLStencilElement {
    }
    var HTMLLookupHostPageElement: {
        prototype: HTMLLookupHostPageElement;
        new (): HTMLLookupHostPageElement;
    };
    interface HTMLPrivacyPolicyElement extends Components.PrivacyPolicy, HTMLStencilElement {
    }
    var HTMLPrivacyPolicyElement: {
        prototype: HTMLPrivacyPolicyElement;
        new (): HTMLPrivacyPolicyElement;
    };
    interface HTMLResetPasswordPageElement extends Components.ResetPasswordPage, HTMLStencilElement {
    }
    var HTMLResetPasswordPageElement: {
        prototype: HTMLResetPasswordPageElement;
        new (): HTMLResetPasswordPageElement;
    };
    interface HTMLSearchPanelElement extends Components.SearchPanel, HTMLStencilElement {
    }
    var HTMLSearchPanelElement: {
        prototype: HTMLSearchPanelElement;
        new (): HTMLSearchPanelElement;
    };
    interface HTMLSideMenuEntryElement extends Components.SideMenuEntry, HTMLStencilElement {
    }
    var HTMLSideMenuEntryElement: {
        prototype: HTMLSideMenuEntryElement;
        new (): HTMLSideMenuEntryElement;
    };
    interface HTMLTaxonomySearchPageElement extends Components.TaxonomySearchPage, HTMLStencilElement {
    }
    var HTMLTaxonomySearchPageElement: {
        prototype: HTMLTaxonomySearchPageElement;
        new (): HTMLTaxonomySearchPageElement;
    };
    interface HTMLTermsOfServiceElement extends Components.TermsOfService, HTMLStencilElement {
    }
    var HTMLTermsOfServiceElement: {
        prototype: HTMLTermsOfServiceElement;
        new (): HTMLTermsOfServiceElement;
    };
    interface HTMLTestPageElement extends Components.TestPage, HTMLStencilElement {
    }
    var HTMLTestPageElement: {
        prototype: HTMLTestPageElement;
        new (): HTMLTestPageElement;
    };
    interface HTMLUnauthorizedHeaderElement extends Components.UnauthorizedHeader, HTMLStencilElement {
    }
    var HTMLUnauthorizedHeaderElement: {
        prototype: HTMLUnauthorizedHeaderElement;
        new (): HTMLUnauthorizedHeaderElement;
    };
    interface HTMLUserProfilePageElement extends Components.UserProfilePage, HTMLStencilElement {
    }
    var HTMLUserProfilePageElement: {
        prototype: HTMLUserProfilePageElement;
        new (): HTMLUserProfilePageElement;
    };
    interface HTMLViewHostPageElement extends Components.ViewHostPage, HTMLStencilElement {
    }
    var HTMLViewHostPageElement: {
        prototype: HTMLViewHostPageElement;
        new (): HTMLViewHostPageElement;
    };
    interface HTMLElementTagNameMap {
        "about-page": HTMLAboutPageElement;
        "admin-home-page": HTMLAdminHomePageElement;
        "admin-side-menu": HTMLAdminSideMenuElement;
        "annotate-host-page": HTMLAnnotateHostPageElement;
        "app-root": HTMLAppRootElement;
        "app-tabs": HTMLAppTabsElement;
        "authorized-header": HTMLAuthorizedHeaderElement;
        "bvbrc-button": HTMLBvbrcButtonElement;
        "bvbrc-dialog": HTMLBvbrcDialogElement;
        "bvbrc-icon": HTMLBvbrcIconElement;
        "bvbrc-ion-button": HTMLBvbrcIonButtonElement;
        "curated-words-page": HTMLCuratedWordsPageElement;
        "curation-tabs": HTMLCurationTabsElement;
        "curator-side-menu": HTMLCuratorSideMenuElement;
        "faq-page": HTMLFaqPageElement;
        "home-page": HTMLHomePageElement;
        "host-taxa-matches-page": HTMLHostTaxaMatchesPageElement;
        "hosts-page": HTMLHostsPageElement;
        "input-control": HTMLInputControlElement;
        "labeled-control": HTMLLabeledControlElement;
        "login-page": HTMLLoginPageElement;
        "lookup-host-page": HTMLLookupHostPageElement;
        "privacy-policy": HTMLPrivacyPolicyElement;
        "reset-password-page": HTMLResetPasswordPageElement;
        "search-panel": HTMLSearchPanelElement;
        "side-menu-entry": HTMLSideMenuEntryElement;
        "taxonomy-search-page": HTMLTaxonomySearchPageElement;
        "terms-of-service": HTMLTermsOfServiceElement;
        "test-page": HTMLTestPageElement;
        "unauthorized-header": HTMLUnauthorizedHeaderElement;
        "user-profile-page": HTMLUserProfilePageElement;
        "view-host-page": HTMLViewHostPageElement;
    }
}
declare namespace LocalJSX {
    interface AboutPage {
    }
    interface AdminHomePage {
    }
    interface AdminSideMenu {
        "isOpen"?: boolean;
    }
    interface AnnotateHostPage {
    }
    interface AppRoot {
    }
    interface AppTabs {
    }
    interface AuthorizedHeader {
        "canGoBack"?: IBoolFunction;
        "controlType"?: HeaderControlType;
        "pageTitle"?: string;
        "useDefault"?: boolean;
    }
    interface BvbrcButton {
        "buttonKey"?: string;
        "clickHandler"?: IUIEventHandler;
        "icon"?: string;
        "iconOnRight"?: boolean;
        "isDisabled"?: boolean;
        "isLoading"?: boolean;
        "label"?: string;
        "loadingIcon"?: string;
        "loadingLabel"?: string;
        "size"?: ButtonSize;
        "status"?: GenericStatus;
    }
    interface BvbrcDialog {
        "cancelIcon"?: string;
        "cancelLabel"?: string;
    }
    interface BvbrcIcon {
        "cssClass"?: string;
        "isCustom"?: boolean;
        "name"?: string;
    }
    interface BvbrcIonButton {
    }
    interface CuratedWordsPage {
    }
    interface CurationTabs {
    }
    interface CuratorSideMenu {
        "isOpen"?: boolean;
    }
    interface FaqPage {
    }
    interface HomePage {
    }
    interface HostTaxaMatchesPage {
    }
    interface HostsPage {
    }
    interface InputControl {
        "controlType"?: ControlType;
        "cssClassNames"?: string[];
        "isReadOnly"?: boolean;
        "labelText"?: string;
        "value"?: string;
    }
    interface LabeledControl {
        "attributeKey"?: string;
        "changeHandler"?: IChangeHandler;
        "controlType"?: ControlType1;
        "initialValue"?: any;
        "isDisabled"?: boolean;
        "isReadOnly"?: boolean;
        "isRequired"?: boolean;
        "keypressHandler"?: IKeyPressHandler;
        "keyupHandler"?: IChangeHandler;
        "labelOrientation"?: LabelOrientation;
        "labelText"?: string;
        "listOptions"?: IControlListOption[];
        "spellcheck"?: boolean;
        "status"?: GenericStatus;
        "statusMessage"?: string;
        "textAreaRows"?: number;
        "textPlaceholder"?: string;
    }
    interface LoginPage {
    }
    interface LookupHostPage {
    }
    interface PrivacyPolicy {
    }
    interface ResetPasswordPage {
    }
    interface SearchPanel {
        "pageKey"?: PageKey;
        "placeholderText"?: string;
        "searchCallback"?: ISearchCallback;
        "useState"?: boolean;
    }
    interface SideMenuEntry {
        "icon"?: string;
        "label"?: string;
    }
    interface TaxonomySearchPage {
    }
    interface TermsOfService {
    }
    interface TestPage {
    }
    interface UnauthorizedHeader {
    }
    interface UserProfilePage {
    }
    interface ViewHostPage {
    }
    interface IntrinsicElements {
        "about-page": AboutPage;
        "admin-home-page": AdminHomePage;
        "admin-side-menu": AdminSideMenu;
        "annotate-host-page": AnnotateHostPage;
        "app-root": AppRoot;
        "app-tabs": AppTabs;
        "authorized-header": AuthorizedHeader;
        "bvbrc-button": BvbrcButton;
        "bvbrc-dialog": BvbrcDialog;
        "bvbrc-icon": BvbrcIcon;
        "bvbrc-ion-button": BvbrcIonButton;
        "curated-words-page": CuratedWordsPage;
        "curation-tabs": CurationTabs;
        "curator-side-menu": CuratorSideMenu;
        "faq-page": FaqPage;
        "home-page": HomePage;
        "host-taxa-matches-page": HostTaxaMatchesPage;
        "hosts-page": HostsPage;
        "input-control": InputControl;
        "labeled-control": LabeledControl;
        "login-page": LoginPage;
        "lookup-host-page": LookupHostPage;
        "privacy-policy": PrivacyPolicy;
        "reset-password-page": ResetPasswordPage;
        "search-panel": SearchPanel;
        "side-menu-entry": SideMenuEntry;
        "taxonomy-search-page": TaxonomySearchPage;
        "terms-of-service": TermsOfService;
        "test-page": TestPage;
        "unauthorized-header": UnauthorizedHeader;
        "user-profile-page": UserProfilePage;
        "view-host-page": ViewHostPage;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "about-page": LocalJSX.AboutPage & JSXBase.HTMLAttributes<HTMLAboutPageElement>;
            "admin-home-page": LocalJSX.AdminHomePage & JSXBase.HTMLAttributes<HTMLAdminHomePageElement>;
            "admin-side-menu": LocalJSX.AdminSideMenu & JSXBase.HTMLAttributes<HTMLAdminSideMenuElement>;
            "annotate-host-page": LocalJSX.AnnotateHostPage & JSXBase.HTMLAttributes<HTMLAnnotateHostPageElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-tabs": LocalJSX.AppTabs & JSXBase.HTMLAttributes<HTMLAppTabsElement>;
            "authorized-header": LocalJSX.AuthorizedHeader & JSXBase.HTMLAttributes<HTMLAuthorizedHeaderElement>;
            "bvbrc-button": LocalJSX.BvbrcButton & JSXBase.HTMLAttributes<HTMLBvbrcButtonElement>;
            "bvbrc-dialog": LocalJSX.BvbrcDialog & JSXBase.HTMLAttributes<HTMLBvbrcDialogElement>;
            "bvbrc-icon": LocalJSX.BvbrcIcon & JSXBase.HTMLAttributes<HTMLBvbrcIconElement>;
            "bvbrc-ion-button": LocalJSX.BvbrcIonButton & JSXBase.HTMLAttributes<HTMLBvbrcIonButtonElement>;
            "curated-words-page": LocalJSX.CuratedWordsPage & JSXBase.HTMLAttributes<HTMLCuratedWordsPageElement>;
            "curation-tabs": LocalJSX.CurationTabs & JSXBase.HTMLAttributes<HTMLCurationTabsElement>;
            "curator-side-menu": LocalJSX.CuratorSideMenu & JSXBase.HTMLAttributes<HTMLCuratorSideMenuElement>;
            "faq-page": LocalJSX.FaqPage & JSXBase.HTMLAttributes<HTMLFaqPageElement>;
            "home-page": LocalJSX.HomePage & JSXBase.HTMLAttributes<HTMLHomePageElement>;
            "host-taxa-matches-page": LocalJSX.HostTaxaMatchesPage & JSXBase.HTMLAttributes<HTMLHostTaxaMatchesPageElement>;
            "hosts-page": LocalJSX.HostsPage & JSXBase.HTMLAttributes<HTMLHostsPageElement>;
            "input-control": LocalJSX.InputControl & JSXBase.HTMLAttributes<HTMLInputControlElement>;
            "labeled-control": LocalJSX.LabeledControl & JSXBase.HTMLAttributes<HTMLLabeledControlElement>;
            "login-page": LocalJSX.LoginPage & JSXBase.HTMLAttributes<HTMLLoginPageElement>;
            "lookup-host-page": LocalJSX.LookupHostPage & JSXBase.HTMLAttributes<HTMLLookupHostPageElement>;
            "privacy-policy": LocalJSX.PrivacyPolicy & JSXBase.HTMLAttributes<HTMLPrivacyPolicyElement>;
            "reset-password-page": LocalJSX.ResetPasswordPage & JSXBase.HTMLAttributes<HTMLResetPasswordPageElement>;
            "search-panel": LocalJSX.SearchPanel & JSXBase.HTMLAttributes<HTMLSearchPanelElement>;
            "side-menu-entry": LocalJSX.SideMenuEntry & JSXBase.HTMLAttributes<HTMLSideMenuEntryElement>;
            "taxonomy-search-page": LocalJSX.TaxonomySearchPage & JSXBase.HTMLAttributes<HTMLTaxonomySearchPageElement>;
            "terms-of-service": LocalJSX.TermsOfService & JSXBase.HTMLAttributes<HTMLTermsOfServiceElement>;
            "test-page": LocalJSX.TestPage & JSXBase.HTMLAttributes<HTMLTestPageElement>;
            "unauthorized-header": LocalJSX.UnauthorizedHeader & JSXBase.HTMLAttributes<HTMLUnauthorizedHeaderElement>;
            "user-profile-page": LocalJSX.UserProfilePage & JSXBase.HTMLAttributes<HTMLUserProfilePageElement>;
            "view-host-page": LocalJSX.ViewHostPage & JSXBase.HTMLAttributes<HTMLViewHostPageElement>;
        }
    }
}
